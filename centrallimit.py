# -*- coding: utf-8 -*-
"""CentralLimit.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14v9hyLAKvSQV3wifN49kpQOs2LQLxCCx
"""

import numpy as np

def generate_population(mean, variance, size):
    # Generate a random population with a normal distribution
    std_dev = np.sqrt(variance)  # Standard deviation is the square root of variance
    population = np.random.normal(mean, std_dev, size)
    return population

# Example usage
x = .8      # Mean of the population
y = .1       # Variance of the population
n = 1000    # Size of the population

population = generate_population(x, y, n)
print("Generated Population:", population)
print("Population Mean:", np.mean(population))
print("Population Variance:", np.var(population))

import matplotlib.pyplot as plt

plt.figure(figsize=(10, 6))
plt.hist(population, bins=100, color='skyblue', edgecolor='black', alpha=0.7, density=True)
plt.title(f'Histogram of Generated Population\nMean={x}, Variance={y}, Size={n}')
plt.xlabel('Value')
plt.ylabel('Frequency')
plt.grid(axis='y', alpha=0.75)

# Show the plot
plt.show()

p = 250      # Size of each sample
q = 10000   # Number of samples

def generate_sampling_distribution(population, sample_size, num_samples):
    sample_means = []
    for _ in range(num_samples):
        sample = np.random.choice(population, size=sample_size, replace=False)
        sample_mean = np.mean(sample)
        sample_means.append(sample_mean)
    return sample_means
sampling_distribution = generate_sampling_distribution(population, p, q)

# Plotting the sampling distribution
plt.figure(figsize=(10, 6))
plt.hist(sampling_distribution, bins=100, color='salmon', edgecolor='black', alpha=0.7)
plt.title(f'Sampling Distribution of Sample Means\nSample Size={p}, Number of Samples={q}')
plt.xlabel('Sample Mean')
plt.ylabel('Frequency')
plt.grid(axis='y', alpha=0.75)

mean = np.mean(sampling_distribution)
variance = np.var(sampling_distribution)
print(f"Mean of Sampling Distribution: {mean}")
print(f"Variance of Sampling Distribution: {variance}")

# Show the plot
plt.show()